select(-Start_time_fmt)
step_IIa <- left_join(step_II, park_ids, by = c('Park_trail' = 'Park_name', 'Agency_name' = 'Agency_name'))
# Ensure all data joined properly - 'step_IIa_unjoined' df should be length 0
step_IIa_unjoined <- step_IIa %>%
filter(is.na(Park_id) | is.na(Agency_id))
# Which agency or agencies have duplicated counts?
step_II_agency_counts <- step_II %>%
group_by(Agency_name) %>%
count()
step_IIa_agency_counts <- step_IIa %>%
group_by(Agency_name) %>%
count()
step_IIa_compare_agency_counts <- full_join(step_II_agency_counts, step_IIa_agency_counts, by = c('Agency_name'))
#
# # In this case, only Anoka.  Which Anoka parks or trails were duplicated?
step_II_park_counts <- step_II %>%
filter(Agency_name == 'Anoka County') %>%
group_by(Park_trail) %>%
count()
step_IIa_park_counts <- step_IIa %>%
filter(Agency_name == 'Anoka County') %>%
group_by(Park_trail) %>%
count()
step_IIa_compare_park_counts <- full_join(step_II_park_counts, step_IIa_park_counts, by = c('Park_trail'))
step_IIa_compare_park_counts %>%
filter(n.x != n.y)
# # In this case, Rum River Central Regional Park is responsible for the duplication.  Rum River CRP was given two park attributions for Anoka County, by mistake.  Remove the '109' attribution from the index.
#
step_IIa_unjoined <- step_IIa %>%
filter(is.na(Park_id) | is.na(Agency_id)) %>%
select(Park_trail, Agency_name) %>%
unique()
# Note that Trout Brook's RT Entrance 4 was fixed manually; if the 2018 Entrance Usage Classifications Index is re-run in the conversion workbook, this will again need to be changed manually (or scripted) according to the document 'Trout Brook RT Entrnace 4 2018 Designations'
entrance_class_join <- entrance_classifications %>%
mutate(Entrance = as.character(Entrance)) %>%
mutate(Start_time = format(strptime(substr(as.POSIXct(sprintf("%04.f", as.numeric(Start_time)), format="%H%M"), 12, 16), '%H:%M'), '%I:%M %p'))
step_III <- left_join(step_IIa, entrance_class_join, by = c('Park_id' = 'Park_trail', 'Entrance', 'Start_time', 'Day_type'))
# Check that there's no missing data for class entrances, as all entrances should receive a classification.  If there are observations missing a classification, this is most likely due to incorrect data entry (conversion from sample class workbook to index has been audited multiple ways and de-bugged; therefore it is shown to have captured 100% of the data in the sample class workbooks).  Check if trail entrance exists; if trail entrance does not exist in Sample Class Workbook, check entrance descriptions.  If it doesn't exist in entrance descriptions, most likely this is data error.  Contact IA coordinator for corrections.
missing_class_assignment <- step_III %>%
filter(is.na(Usage_class)) %>%
group_by(Park_trail, Agency_name, Start_time, Entrance) %>%
count()
missing_class_assignment_rows <- step_III %>%
filter(is.na(Usage_class))
## This df ^^ should be length 0
step_III_dups <- step_III %>%
group_by(Park_id, Date, Start_time, Entrance) %>%
count() %>%
filter(n > 1)
step_III_dups
# Where there are duplicates, accept the entry with the most recent entry date and time combination (consider it a 'corrected' entry)
step_III_dups_full <- inner_join(step_III, step_III_dups, by = c('Park_id', 'Date', 'Start_time', 'Entrance'))
step_IV <- left_join(step_III, bus_vehicle_multipliers, by = c('Park_id' = 'Park'))
step_IV_unjoined <- step_IV %>%
filter(is.na(ppb_multiplier) | is.na(ppv_multiplier)) %>%
select(Park_id) %>%
unique()
## These parks are new and therefore don't have assigned multipliers; however they have zero vehicles or buses entering the park
# Check full number of observations missing data
step_IV_unjoined_full <- step_IV %>%
filter(is.na(ppb_multiplier) | is.na(ppv_multiplier))
# Check number of buses and vehicles that came into the new parks
step_IV_unjoined_bv <- step_IV %>%
filter(Park_id == 133 | Park_id == 140) %>%
select(Vehicles, Buses) %>%
filter(Vehicles != 0 | Buses != 0)
## Change missing ppv and ppb multipliers to 1
step_IV_tidy <- step_IV %>%
mutate(ppb_multiplier = ifelse(is.na(ppb_multiplier), 1, ppb_multiplier),
ppv_multiplier = ifelse(is.na(ppv_multiplier), 1, ppv_multiplier))
expansion_factors <- entrance_classifications %>%
group_by(Park_trail, Usage_class, Day_type) %>%
count() %>%
rename(Expansion_factor = n)
# Join multipliers to parks to use to calculate total number of visitors in sample
step_V <- left_join(step_IV_tidy, expansion_factors, by = c('Park_id' = 'Park_trail', 'Usage_class' = 'Usage_class', 'Day_type' = 'Day_type'))
# Check that observations are not missing an expansion factor assignment.  No observation should be missing an assignment (i.e. this code should return a tibble with 0 observations).  If observations are missing an assignment, follow the same steps outlined in the missing assignment check of Step 3 of this script.
step_V_unjoined <- step_V %>%
filter(is.na(Expansion_factor))
# For purposes of preliminary check of numbers, use only those counts that have an expansion factor assigned (un-assigned factors may be because parks are new or because of incorrect data entry)
step_V_not_na <- step_V %>%
filter(!is.na(Expansion_factor))
## Ramsey is the only agency that has entrances which may have a different usage classification for weekday/weekend
# Compute expanded total of visitors (total for entire season, based on sample)
step_VI <- step_V %>%
mutate(Expanded_total = (ppv_multiplier*as.numeric(Vehicles) + as.numeric(Bikers) + as.numeric(Peds_skaters) +
ppb_multiplier*as.numeric(Buses) + as.numeric(Horse_riders) + as.numeric(Boaters)) *
as.numeric(Total_days_by_type) * as.numeric(Expansion_factor))
setwd('Datasets/2013-2017')
x2014_2017 <- read_csv('2014-2017 Data.csv')
x2015_2017 <- x2014_2017 %>%
mutate(Least_recent_year = min(Year)) %>%
filter(Year != Least_recent_year) %>% # Filter down to three most recent years of data
select(-Least_recent_year) %>%
separate(gooddate, into = c('Month', 'Day'), sep = 1) %>%
mutate(Year_for_date = Year) %>%
unite(Date, Month, Day, Year_for_date, sep = '-') %>%
mutate(Date = as_date(mdy(Date)),
Park = ifelse(Park == 121, 116, Park),
agency = ifelse(agency == 6 & Park == 63, 7, agency)) %>%
rename(Agency_id = agency,
Park_id = Park,
Bikers = Biker,
Peds_skaters = Pedskat,
Boaters = Boat,
Vehicles = Vehicle,
Buses = Bus,
Horse_riders = Horse,
Usage_class = samclass,
Total_visitors = totalall,
Day_type = daytype,
Start_time = orgstart,
Expansion_factor = expfact,
ppv_multiplier = new2008ppv,
ppb_multiplier = newppb,
Total_days_by_type = `day#s`,
Half_of_summer = half,
Expanded_total = totalsum) %>%
select(-carpeop, -buspeop) %>%
mutate(Start_time = str_replace(Start_time, "10000", "1000"),
Start_time = as.numeric(Start_time)) %>%
mutate(Usage_class = ifelse(Usage_class == 1, 'High',
ifelse(Usage_class == 2, 'Medium', 'Low'))) %>%
mutate(Start_time = format(strptime(substr(as.POSIXct(sprintf("%04.f", as.numeric(Start_time)), format="%H%M"), 12, 16), '%H:%M'), '%I:%M %p')) %>%
mutate(Day_type = ifelse(Day_type == 1, 'Weekend_holiday', 'Weekday'))
x2015_17_ids <- left_join(x2015_2017, park_ids, by = c('Park_id', 'Agency_id'))
x2018 <- step_VI %>%
mutate(Year = 2018) %>%
mutate(Entrance = as.numeric(Entrance),
Bikers = as.numeric(Bikers),
Peds_skaters = as.numeric(Peds_skaters),
Vehicles = as.numeric(Vehicles),
Buses = as.numeric(Buses),
Boaters = as.numeric(Boaters),
Horse_riders = as.numeric(Horse_riders)) %>%
rename(Park_name = Park_trail)
x2015_2018 <- bind_rows(x2015_17_ids, x2018)
x2018_tidy <- x2018 %>%
gather(Bikers, Boaters, Buses, Horse_riders, Peds_skaters, Vehicles, key = 'Visitor Category', value = 'Visitors')
write_csv(x2018_tidy, 'Raw Summer 2018 Counts Totaled.csv')
write_csv(x2018, 'Raw Summer 2018 Counts.csv')
write_csv(x2015_2018, '2015 to 2018 Expanded Totals - Prior to Averaging.csv')
x2015_2018_avg <- x2015_2018 %>%
mutate(Park_id = ifelse(Park_id == 121, 116, Park_id)) %>% # Not sure why, but in past years SW RT was coded as 121.  In all documentation, however, it's coded as 116
unique() %>%
group_by(Park_id, Usage_class, Day_type) %>%
mutate(Average_expanded_total = mean(Expanded_total, na.rm = T)) %>%
ungroup() %>%
select(Park_id, Usage_class, Day_type, Average_expanded_total) %>%
unique() %>%
select(-Usage_class, -Day_type) %>%
group_by(Park_id) %>%
mutate(Estimate_18 = sum(Average_expanded_total)) %>%
select(-Average_expanded_total) %>%
unique() %>%
ungroup() %>%
mutate(Park_id = as.numeric(Park_id)) %>%
arrange(Park_id)
x2015_2018_avg_use_class_park <- x2015_2018 %>%
mutate(Park_id = ifelse(Park_id == 121, 116, Park_id)) %>% # Not sure why, but in past years SW RT was coded as 121.  In all documentation, however, it's coded as 116
unique() %>%
group_by(Park_id, Usage_class, Day_type) %>%
mutate(Average_expanded_total = mean(Expanded_total)) %>%
ungroup() %>%
select(Park_id, Agency_id, Usage_class, Day_type, Average_expanded_total) %>%
unique()
x2015_2018_avg %>%
mutate(total = sum(Estimate_18))
setwd('Datasets/2013-2017/Summer Use Estimates')
## 2017
estimates_2017 <- read_csv('2017 Summer Use Estimates - No Events or Camping.csv')
x2017_tidy <- estimates_2017 %>%
rename(Park_trail = `Park or Trail`,
Estimate_17 = `Total by class and day type`) %>%
separate(Park_trail, into = c('Park_id', 'Trail_name'), sep = '=') %>%
mutate(Park_id = trimws(Park_id),
Trail_name = trimws(Trail_name)) %>%
mutate(Park_id = ifelse(Park_id == 121, 116, Park_id)) %>%
mutate(Park_id = as.numeric(Park_id)) %>%
select(-Trail_name)
## 2016
estimates_2016 <- read_csv('2016 Summer Use Estimates - No Events or Camping.csv')
x2016_tidy <- estimates_2016 %>%
rename(Park_trail = `Park or Trail`,
Estimate_16 = `Total by class and day type`) %>%
separate(Park_trail, into = c('Park_id', 'Trail_name'), sep = '=') %>%
mutate(Park_id = trimws(Park_id),
Trail_name = trimws(Trail_name)) %>%
mutate(Park_id = ifelse(Park_id == 121, 116, Park_id)) %>%
mutate(Park_id = as.numeric(Park_id)) %>%
select(-Trail_name)
## 2015
estimates_2015 <- read_csv('2015 Summer Use Estimates - No Events or Camping.csv')
x2015_tidy <- estimates_2015 %>%
rename(Park_trail = `Park or Trail`,
Estimate_15 = `Total by class and day type`) %>%
separate(Park_trail, into = c('Park_id', 'Trail_name'), sep = '=') %>%
mutate(Park_id = trimws(Park_id),
Trail_name = trimws(Trail_name)) %>%
mutate(Park_id = ifelse(Park_id == 121, 116, Park_id)) %>%
mutate(Park_id = as.numeric(Park_id)) %>%
select(-Trail_name)
## 2014
estimates_2014 <- read_csv('2014 Summer Use Estimates - No Events or Camping.csv')
x2014_tidy <- estimates_2014 %>%
rename(Park_trail = `Park or Trail`,
Estimate_14 = `Total by class and day type`) %>%
separate(Park_trail, into = c('Park_id', 'Trail_name'), sep = '=') %>%
mutate(Park_id = trimws(Park_id),
Trail_name = trimws(Trail_name)) %>%
mutate(Park_id = ifelse(Park_id == 121, 116, Park_id)) %>%
mutate(Park_id = as.numeric(Park_id)) %>%
select(-Trail_name)
## 2013
estimates_2013 <- read_csv('2013 Summer Use Estimates - No Events or Camping.csv')
x2013_tidy <- estimates_2013 %>%
rename(Park_trail = `Park or Trail`,
Estimate_13 = `Total by class and day type`) %>%
separate(Park_trail, into = c('Park_id', 'Trail_name'), sep = '=') %>%
mutate(Park_id = trimws(Park_id),
Trail_name = trimws(Trail_name)) %>%
mutate(Park_id = as.numeric(Park_id)) %>%
select(-Trail_name)
estimates_17_18 <- left_join(x2015_2018_avg, x2017_tidy, by = c('Park_id'))
estimates_16_18 <- left_join(estimates_17_18, x2016_tidy, by = c('Park_id'))
estimates_15_18 <- left_join(estimates_16_18, x2015_tidy, by = c('Park_id'))
estimates_14_18 <- left_join(estimates_15_18, x2014_tidy, by = c('Park_id'))
estimates_13_18 <- left_join(estimates_14_18, x2013_tidy, by = c('Park_id'))
estimates_13_18_full <- left_join(estimates_13_18, park_ids, by = c('Park_id'))
estimates_comparison_tidy <- estimates_13_18_full %>%
gather(Estimate_18, Estimate_17, Estimate_16, Estimate_15, Estimate_14, Estimate_13, key = 'Year', value = Estimate) %>%
separate(Year, into = c('drop', 'Year_suffix'), sep = '_') %>%
select(-drop) %>%
mutate(Year_prefix = 20) %>%
unite(Year, Year_prefix, Year_suffix, sep = '')
agency_comparison_percent <- estimates_comparison_tidy %>%
filter(!is.na(Estimate)) %>%
group_by(Year) %>%
mutate(Summer_total = sum(Estimate)) %>%
ungroup() %>%
group_by(Agency_id, Year) %>%
mutate(Summer_total_by_agency = sum(Estimate)) %>%
ungroup() %>%
mutate(Agency_percentage_for_summer = Summer_total_by_agency/Summer_total*100) %>%
select(Agency_percentage_for_summer, Agency_id, Agency_name, Summer_total_by_agency, Summer_total, Year) %>%
unique()
park_comparison_percent <- estimates_comparison_tidy %>%
group_by(Year) %>%
mutate(Summer_total = sum(Estimate)) %>%
mutate(Park_total_for_summer = Estimate/Summer_total*100) %>%
select(Park_total_for_summer, Park_id, Park_name, Estimate, Year) %>%
unique()
write_csv(agency_comparison_percent, 'Summer Visitor Use Estimates Aggregated by Agency.csv')
write_csv(park_comparison_percent, 'Summer Visitor Use Estimates Aggregated by Park.csv')
write_csv(estimates_comparison_tidy, 'Summer Visitor Use Estimate 2013 to 2018.csv')
library(tidyverse)
setwd('Results')
summer_estimates <- read_csv('Summer Visitor Use Estimates Aggregated by Park.csv')
summer_estimates_2018 <- summer_estimates %>%
filter(Year == 2018)
setwd('..')
setwd('Datasets/Special Events and Camping')
parks <- list.files(pattern = '*.csv')
make_names <- function(name_vector) {
name_vector_df <- as.data.frame(name_vector)
new_names <- name_vector_df %>%
rename(Agency_name = 1) %>%
mutate(Agency_name = str_replace_all(Agency_name, c('2018 ' = '', ' ' = '_', '-' = '_', '\\.csv' = '')))
new_names_list <- as.list(new_names)
return(new_names_list$Agency_name)
}
list2env(map(set_names(parks, make_names(parks)), read_csv), envir = .GlobalEnv)
events_camping <- bind_rows(Anoka_County_Events_Camping, Bloomington_Events_Camping,
Carver_County_Events_Camping, Dakota_County_Events_Camping,
MPRB_Events_Camping, Ramsey_County_Events_Camping,
Saint_Paul_Events_Camping, TRPD_Events_Camping,
TRPD_Scott_Events_Camping, Washington_County_Events_Camping)
setwd('Datasets/Indices')
seasonal_multipliers <- read_csv('Seasonal Multipliers.csv')
park_agency_codes <- read_csv('Park and Agency Codes Index.csv')
summer_estimates_agency <- left_join(summer_estimates_2018, park_agency_codes, by = c('Park_id', 'Park_name'))
estimates_events_camping <- full_join(summer_estimates_agency, events_camping, by = c('Park_name', 'Agency_name'))
estimates_events_camping_seasons <- left_join(estimates_events_camping, seasonal_multipliers, by = c('Park_name', 'Agency_name'))
annual_estimates <- estimates_events_camping_seasons %>%
mutate(Winter_multiplier = ifelse(Park_name == 'Nokomis-Minnesota River Bluffs Regional Trail' | Park_name == 'Point Douglas Regional Trail', 0.299,
ifelse(Park_name == 'Lake Minnetonka Islands' | Park_name == 'The Landing Special Recreation Feature', 0, as.numeric(Winter_multiplier))),
Spring_Fall_multiplier = ifelse(Park_name == 'Nokomis-Minnesota River Bluffs Regional Trail' | Park_name == 'Point Douglas Regional Trail', 1.533,
ifelse(Park_name == 'Lake Minnetonka Islands' | Park_name == 'The Landing Special Recreation Feature', 0, as.numeric(Spring_Fall_multiplier))),
Event_visitors = ifelse(is.na(Event_visitors), 0, Event_visitors),
Camping_visitors = ifelse(is.na(Camping_visitors), 0, Camping_visitors),
Walk_in_visits = ifelse(is.na(Walk_in_visits), 0, Walk_in_visits),
Estimate = ifelse(is.na(Estimate), 0, Estimate),
Enterprise_operation_visits = ifelse(is.na(Enterprise_operation_visits), 0, Enterprise_operation_visits)) %>%
mutate(Annual_estimate = Estimate + Estimate*Winter_multiplier + Estimate*Spring_Fall_multiplier + Event_visitors*1000 + Camping_visitors*1000 + Walk_in_visits*1000 - Enterprise_operation_visits*1000) %>%
mutate(Agency_name = ifelse(Park_name == 'Cleary Lake Regional Park (Scott County)' | Park_name == 'Murphy-Hanrehan Park Reserve (Scott County)', 'Three Rivers Park District - Scott', Agency_name))
write_csv(annual_estimates, 'Estimate of 2018 Usage of Regional Parks and Trails at Park-Trail Level.csv')
annual_estimates_agency <- annual_estimates %>%
group_by(Agency_name) %>%
mutate(Estimate_in_thousands = sum(Annual_estimate)/1000) %>%
select(Agency_name, Estimate_in_thousands) %>%
unique() %>%
ungroup() %>%
mutate(Total_regional_visits = sum(Estimate_in_thousands),
Percentage_of_total_regional_visits = Estimate_in_thousands/Total_regional_visits*100,
Agency_name = ifelse(Agency_name == 'Three Rivers Park District', 'Three Rivers Park District - Hennepin',
ifelse(Agency_name == 'Minneapolis Park and Recreation Board', 'Minneapolis Park & Recreation Board', Agency_name))) %>%
select(Agency_name, Estimate_in_thousands, Percentage_of_total_regional_visits) %>%
rename(Agency = Agency_name,
Percent = Percentage_of_total_regional_visits) %>%
mutate(Year = 2018)
setwd('Datasets/2013-2017/Annual Use Estimates')
annual_estimates_historic <- list.files(pattern = '*.csv')
list2env(map(set_names(annual_estimates_historic, make_names(annual_estimates_historic)), read_csv), envir = .GlobalEnv)
annual_estimates_13_18 <- bind_rows(`2013_Annual_Use_Estimates`, `2015_Annual_Use_Estimates`, `2016_Annual_Use_Estimates`, `2017_Annual_Use_Estimates`, annual_estimates_agency)
write_csv(annual_estimates_13_18, 'Annual Use Estimates 2013 through 2018.csv')
View(annual_estimates)
library(tidyverse)
setwd('Results')
summer_estimates <- read_csv('Summer Visitor Use Estimates Aggregated by Park.csv')
summer_estimates_2018 <- summer_estimates %>%
filter(Year == 2018)
setwd('..')
setwd('Datasets/Special Events and Camping')
parks <- list.files(pattern = '*.csv')
make_names <- function(name_vector) {
name_vector_df <- as.data.frame(name_vector)
new_names <- name_vector_df %>%
rename(Agency_name = 1) %>%
mutate(Agency_name = str_replace_all(Agency_name, c('2018 ' = '', ' ' = '_', '-' = '_', '\\.csv' = '')))
new_names_list <- as.list(new_names)
return(new_names_list$Agency_name)
}
list2env(map(set_names(parks, make_names(parks)), read_csv), envir = .GlobalEnv)
events_camping <- bind_rows(Anoka_County_Events_Camping, Bloomington_Events_Camping,
Carver_County_Events_Camping, Dakota_County_Events_Camping,
MPRB_Events_Camping, Ramsey_County_Events_Camping,
Saint_Paul_Events_Camping, TRPD_Events_Camping,
TRPD_Scott_Events_Camping, Washington_County_Events_Camping)
setwd('Datasets/Indices')
seasonal_multipliers <- read_csv('Seasonal Multipliers.csv')
park_agency_codes <- read_csv('Park and Agency Codes Index.csv')
summer_estimates_agency <- left_join(summer_estimates_2018, park_agency_codes, by = c('Park_id', 'Park_name'))
estimates_events_camping <- full_join(summer_estimates_agency, events_camping, by = c('Park_name', 'Agency_name'))
estimates_events_camping_seasons <- left_join(estimates_events_camping, seasonal_multipliers, by = c('Park_name', 'Agency_name'))
annual_estimates <- estimates_events_camping_seasons %>%
mutate(Winter_multiplier = ifelse(Park_name == 'Nokomis-Minnesota River Bluffs Regional Trail' | Park_name == 'Point Douglas Regional Trail', 0.299,
ifelse(Park_name == 'Lake Minnetonka Islands' | Park_name == 'The Landing Special Recreation Feature', 0, as.numeric(Winter_multiplier))),
Spring_Fall_multiplier = ifelse(Park_name == 'Nokomis-Minnesota River Bluffs Regional Trail' | Park_name == 'Point Douglas Regional Trail', 1.533,
ifelse(Park_name == 'Lake Minnetonka Islands' | Park_name == 'The Landing Special Recreation Feature', 0, as.numeric(Spring_Fall_multiplier))),
Event_visitors = ifelse(is.na(Event_visitors), 0, Event_visitors),
Camping_visitors = ifelse(is.na(Camping_visitors), 0, Camping_visitors),
Walk_in_visits = ifelse(is.na(Walk_in_visits), 0, Walk_in_visits),
Estimate = ifelse(is.na(Estimate), 0, Estimate),
Enterprise_operation_visits = ifelse(is.na(Enterprise_operation_visits), 0, Enterprise_operation_visits)) %>%
mutate(Annual_estimate = Estimate + Estimate*Winter_multiplier + Estimate*Spring_Fall_multiplier + Event_visitors*1000 + Camping_visitors*1000 + Walk_in_visits*1000 - Enterprise_operation_visits*1000) %>%
mutate(Agency_name = ifelse(Park_name == 'Cleary Lake Regional Park (Scott County)' | Park_name == 'Murphy-Hanrehan Park Reserve (Scott County)', 'Three Rivers Park District - Scott', Agency_name))
write_csv(annual_estimates, 'Estimate of 2018 Usage of Regional Parks and Trails at Park-Trail Level.csv')
annual_estimates_agency <- annual_estimates %>%
group_by(Agency_name) %>%
mutate(Estimate_in_thousands = sum(Annual_estimate)/1000) %>%
select(Agency_name, Estimate_in_thousands) %>%
unique() %>%
ungroup() %>%
mutate(Total_regional_visits = sum(Estimate_in_thousands),
Percentage_of_total_regional_visits = Estimate_in_thousands/Total_regional_visits*100,
Agency_name = ifelse(Agency_name == 'Three Rivers Park District', 'Three Rivers Park District - Hennepin',
ifelse(Agency_name == 'Minneapolis Park and Recreation Board', 'Minneapolis Park & Recreation Board', Agency_name))) %>%
select(Agency_name, Estimate_in_thousands, Percentage_of_total_regional_visits) %>%
rename(Agency = Agency_name,
Percent = Percentage_of_total_regional_visits) %>%
mutate(Year = 2018)
View(annual_estimates_agency)
write_csv(annual_estimates_agency, '2019 Regional Parks Estimates for Operations and Maintenance Funding.csv')
annual_estimates_agency <- annual_estimates %>%
group_by(Agency_name) %>%
mutate(Estimate_in_thousands = sum(Annual_estimate)/1000) %>%
select(Agency_name, Estimate_in_thousands) %>%
unique() %>%
ungroup() %>%
mutate(Total_regional_visits = sum(Estimate_in_thousands),
Percentage_of_total_regional_visits = Estimate_in_thousands/Total_regional_visits*100,
Agency_name = ifelse(Agency_name == 'Three Rivers Park District', 'Three Rivers Park District - Hennepin',
ifelse(Agency_name == 'Minneapolis Park and Recreation Board', 'Minneapolis Park & Recreation Board', Agency_name))) %>%
select(Agency_name, Estimate_in_thousands, Percentage_of_total_regional_visits) %>%
rename(Agency = Agency_name,
Percent = Percentage_of_total_regional_visits) %>%
mutate(Year = 2018) %>%
rename(`Estimate in thousands` = Estimate_in_thousands)
write_csv(annual_estimates_agency, '2019 Regional Parks Estimates for Operations and Maintenance Funding.csv')
seasonal_multipliers <- read_csv('Datasets/Indices/Seasonal Multipliers.csv')
# Import packages
library(tidyverse)
library(lubridate)
library(RQuantLib)
library(plotly)
library(roxygen2)
seasonal_multipliers <- read_csv('Datasets/Indices/Seasonal Multipliers.csv')
park_agency_codes <- read_csv('Datasets/Indices/Park and Agency Codes Index.csv')
summer_estimates_agency <- left_join(summer_estimates_2018, park_agency_codes, by = c('Park_id', 'Park_name'))
summer_estimates <- read_csv('Summer Visitor Use Estimates Aggregated by Park.csv')
summer_estimates <- read_csv('Results/Summer Visitor Use Estimates Aggregated by Park.csv')
summer_estimates_2018 <- summer_estimates %>%
filter(Year == 2018)
summer_estimates_agency <- left_join(summer_estimates_2018, park_agency_codes, by = c('Park_id', 'Park_name'))
estimates_events_camping <- full_join(summer_estimates_agency, events_camping, by = c('Park_name', 'Agency_name'))
library(tidyverse)
summer_estimates <- read_csv('Results/Summer Visitor Use Estimates Aggregated by Park.csv')
summer_estimates_2018 <- summer_estimates %>%
filter(Year == 2018)
setwd('Datasets/Special Events and Camping')
parks <- list.files(pattern = '*.csv')
make_names <- function(name_vector) {
name_vector_df <- as.data.frame(name_vector)
new_names <- name_vector_df %>%
rename(Agency_name = 1) %>%
mutate(Agency_name = str_replace_all(Agency_name, c('2018 ' = '', ' ' = '_', '-' = '_', '\\.csv' = '')))
new_names_list <- as.list(new_names)
return(new_names_list$Agency_name)
}
list2env(purrr::map(set_names(parks, make_names(parks)), read_csv), envir = .GlobalEnv)
events_camping <- bind_rows(Anoka_County_Events_Camping, Bloomington_Events_Camping,
Carver_County_Events_Camping, Dakota_County_Events_Camping,
MPRB_Events_Camping, Ramsey_County_Events_Camping,
Saint_Paul_Events_Camping, TRPD_Events_Camping,
TRPD_Scott_Events_Camping, Washington_County_Events_Camping)
summer_estimates_agency <- left_join(summer_estimates_2018, park_agency_codes, by = c('Park_id', 'Park_name'))
estimates_events_camping <- full_join(summer_estimates_agency, events_camping, by = c('Park_name', 'Agency_name'))
estimates_events_camping_seasons <- left_join(estimates_events_camping, seasonal_multipliers, by = c('Park_name', 'Agency_name'))
annual_estimates <- estimates_events_camping_seasons %>%
mutate(Winter_multiplier = ifelse(Park_name == 'Nokomis-Minnesota River Bluffs Regional Trail' | Park_name == 'Point Douglas Regional Trail', 0.299,
ifelse(Park_name == 'Lake Minnetonka Islands' | Park_name == 'The Landing Special Recreation Feature', 0, as.numeric(Winter_multiplier))),
Spring_Fall_multiplier = ifelse(Park_name == 'Nokomis-Minnesota River Bluffs Regional Trail' | Park_name == 'Point Douglas Regional Trail', 1.533,
ifelse(Park_name == 'Lake Minnetonka Islands' | Park_name == 'The Landing Special Recreation Feature', 0, as.numeric(Spring_Fall_multiplier))),
Event_visitors = ifelse(is.na(Event_visitors), 0, Event_visitors),
Camping_visitors = ifelse(is.na(Camping_visitors), 0, Camping_visitors),
Walk_in_visits = ifelse(is.na(Walk_in_visits), 0, Walk_in_visits),
Estimate = ifelse(is.na(Estimate), 0, Estimate),
Enterprise_operation_visits = ifelse(is.na(Enterprise_operation_visits), 0, Enterprise_operation_visits)) %>%
mutate(Annual_estimate = Estimate + Estimate*Winter_multiplier + Estimate*Spring_Fall_multiplier + Event_visitors*1000 + Camping_visitors*1000 + Walk_in_visits*1000 - Enterprise_operation_visits*1000) %>%
mutate(Agency_name = ifelse(Park_name == 'Cleary Lake Regional Park (Scott County)' | Park_name == 'Murphy-Hanrehan Park Reserve (Scott County)', 'Three Rivers Park District - Scott', Agency_name))
View(annual_estimates)
write_csv(annual_estimates, 'Results/Estimate of 2018 Usage of Regional Parks and Trails at Park-Trail Level.csv')
estimates_17_18 <- left_join(x2015_2018_avg, x2017_tidy, by = c('Park_id'))
# Import packages
library(tidyverse)
library(lubridate)
library(RQuantLib)
library(plotly)
library(roxygen2)
library(tidyverse)
summer_estimates <- read_csv('Results/Summer Visitor Use Estimates Aggregated by Park.csv')
summer_estimates_2018 <- summer_estimates %>%
filter(Year == 2018)
setwd('Datasets/Special Events and Camping')
parks <- list.files(pattern = '*.csv')
make_names <- function(name_vector) {
name_vector_df <- as.data.frame(name_vector)
new_names <- name_vector_df %>%
rename(Agency_name = 1) %>%
mutate(Agency_name = str_replace_all(Agency_name, c('2018 ' = '', ' ' = '_', '-' = '_', '\\.csv' = '')))
new_names_list <- as.list(new_names)
return(new_names_list$Agency_name)
}
list2env(purrr::map(set_names(parks, make_names(parks)), read_csv), envir = .GlobalEnv)
events_camping <- bind_rows(Anoka_County_Events_Camping, Bloomington_Events_Camping,
Carver_County_Events_Camping, Dakota_County_Events_Camping,
MPRB_Events_Camping, Ramsey_County_Events_Camping,
Saint_Paul_Events_Camping, TRPD_Events_Camping,
TRPD_Scott_Events_Camping, Washington_County_Events_Camping)
seasonal_multipliers <- read_csv('Datasets/Indices/Seasonal Multipliers.csv')
park_agency_codes <- read_csv('Datasets/Indices/Park and Agency Codes Index.csv')
summer_estimates_agency <- left_join(summer_estimates_2018, park_agency_codes, by = c('Park_id', 'Park_name'))
estimates_events_camping <- full_join(summer_estimates_agency, events_camping, by = c('Park_name', 'Agency_name'))
estimates_events_camping_seasons <- left_join(estimates_events_camping, seasonal_multipliers, by = c('Park_name', 'Agency_name'))
annual_estimates <- estimates_events_camping_seasons %>%
mutate(Winter_multiplier = ifelse(Park_name == 'Nokomis-Minnesota River Bluffs Regional Trail' | Park_name == 'Point Douglas Regional Trail', 0.299,
ifelse(Park_name == 'Lake Minnetonka Islands' | Park_name == 'The Landing Special Recreation Feature', 0, as.numeric(Winter_multiplier))),
Spring_Fall_multiplier = ifelse(Park_name == 'Nokomis-Minnesota River Bluffs Regional Trail' | Park_name == 'Point Douglas Regional Trail', 1.533,
ifelse(Park_name == 'Lake Minnetonka Islands' | Park_name == 'The Landing Special Recreation Feature', 0, as.numeric(Spring_Fall_multiplier))),
Event_visitors = ifelse(is.na(Event_visitors), 0, Event_visitors),
Camping_visitors = ifelse(is.na(Camping_visitors), 0, Camping_visitors),
Walk_in_visits = ifelse(is.na(Walk_in_visits), 0, Walk_in_visits),
Estimate = ifelse(is.na(Estimate), 0, Estimate),
Enterprise_operation_visits = ifelse(is.na(Enterprise_operation_visits), 0, Enterprise_operation_visits)) %>%
mutate(Annual_estimate = Estimate + Estimate*Winter_multiplier + Estimate*Spring_Fall_multiplier + Event_visitors*1000 + Camping_visitors*1000 + Walk_in_visits*1000 - Enterprise_operation_visits*1000) %>%
mutate(Agency_name = ifelse(Park_name == 'Cleary Lake Regional Park (Scott County)' | Park_name == 'Murphy-Hanrehan Park Reserve (Scott County)', 'Three Rivers Park District - Scott', Agency_name))
write_csv(annual_estimates, 'Results/Estimate of 2018 Usage of Regional Parks and Trails at Park-Trail Level.csv')
annual_estimates_agency <- annual_estimates %>%
group_by(Agency_name) %>%
mutate(Estimate_in_thousands = sum(Annual_estimate)/1000) %>%
select(Agency_name, Estimate_in_thousands) %>%
unique() %>%
ungroup() %>%
mutate(Total_regional_visits = sum(Estimate_in_thousands),
Percentage_of_total_regional_visits = Estimate_in_thousands/Total_regional_visits*100,
Agency_name = ifelse(Agency_name == 'Three Rivers Park District', 'Three Rivers Park District - Hennepin',
ifelse(Agency_name == 'Minneapolis Park and Recreation Board', 'Minneapolis Park & Recreation Board', Agency_name))) %>%
select(Agency_name, Estimate_in_thousands, Percentage_of_total_regional_visits) %>%
rename(Agency = Agency_name,
Percent = Percentage_of_total_regional_visits) %>%
mutate(Year = 2018)
write_csv(annual_estimates_agency, 'Results/2018 Regional Parks Estimates for Operations and Maintenance Funding.csv')
setwd('Datasets/2013-2017/Annual Use Estimates')
annual_estimates_historic <- list.files(pattern = '*.csv')
list2env(lapply(set_names(annual_estimates_historic, make_names(gsub("*.csv$", "", annual_estimates_historic))), read_csv), envir = .GlobalEnv)
annual_estimates_13_18 <- bind_rows(`2013_Annual_Use_Estimates`, `2015_Annual_Use_Estimates`, `2016_Annual_Use_Estimates`, `2017_Annual_Use_Estimates`, annual_estimates_agency)
write_csv(annual_estimates_13_18, 'Annual Use Estimates 2013 through 2018.csv')
setwd('Datasets/2013-2017/Annual Use Estimates')
annual_estimates_historic <- list.files(pattern = '*.csv')
list2env(lapply(set_names(annual_estimates_historic, make_names(gsub("*.csv$", "", annual_estimates_historic))), read_csv), envir = .GlobalEnv)
annual_estimates_13_18 <- bind_rows(`2013_Annual_Use_Estimates`, `2015_Annual_Use_Estimates`, `2016_Annual_Use_Estimates`, `2017_Annual_Use_Estimates`, annual_estimates_agency)
write_csv(annual_estimates_13_18, 'Annual Use Estimates 2013 through 2018.csv')
